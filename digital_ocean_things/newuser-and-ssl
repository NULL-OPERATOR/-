https://code.lengstorf.com/deploy-nodejs-ssl-digitalocean/

ssh root@ip
--
adduser name
id quintet

# Add sudo group to user
usermod -aG sudo name

--
pbcopy < ~/.ssh/id_rsa.pub
--

# Become the new user
su - name

# Create a new directory for SSH
mkdir ~/.ssh

# Set the permissions to only allow this user into it
chmod 700 ~/.ssh

# Create a file for SSH keys
vi ~/.ssh/authorized_keys

# Set the permissions to only allow this user to access it
chmod 600 ~/.ssh/authorized_keys

# Stop acting as the new user and become root again
exit

ssh name@ip

sudo vi /etc/ssh/sshd_config


Find PermitRootLogin yes and change it to PermitRootLogin no
Find #PasswordAuthentication yes and change it to PasswordAuthentication no

# Reloads the configuration we just changed
sudo systemctl reload sshd



### basic firewall

# Enable OpenSSH connections
sudo ufw allow OpenSSH

# Enable HTTP traffic
sudo ufw allow http

# Enable HTTPS traffic
sudo ufw allow https

# Turn the firewall on
sudo ufw enable

# check status
sudo ufw status

### setup node &clone app

sudo apt-get install git
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install nodejs

cd ~
mkdir apps
cd apps/

git clone appurl

cd app
npm install


sudo npm install -g pm2

pm2 start server.js


# start pm2 with server restart
pm2 startup systemd


### setting up lets encrypt

# Install tools that Let’s Encrypt requires
sudo apt-get install bc

# Clone the Let’s Encrypt repository to your server
sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt


## setup domain to point to droplet

dig +short app.example.com
# output should be your droplet’s IP address, e.g. 138.68.11.65

# Move into the Let’s Encrypt directory
cd /opt/letsencrypt

# Create the SSL certificate
./certbot-auto certonly --standalone

/opt/letsencrypt/certbot-auto renew

sudo crontab -e

00 1 * * 1 /opt/letsencrypt/certbot-auto renew >> /var/log/letsencrypt-renewal.log
30 1 * * 1 /bin/systemctl reload nginx


# reverse proxy setup
sudo apt-get install nginx

sudo vi /etc/nginx/sites-enabled/default

# or use do guide for setup


# more scure ssl
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

sudo vi /etc/nginx/snippets/ssl-params.conf


copy these inside

# See https://cipherli.st/ for details on this configuration
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off; # Requires nginx >= 1.5.9
ssl_stapling on; # Requires nginx >= 1.3.7
ssl_stapling_verify on; # Requires nginx => 1.3.7
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;

# Add our strong Diffie-Hellman group
ssl_dhparam /etc/ssl/certs/dhparam.pem;



sudo vi /etc/nginx/sites-enabled/default

# HTTPS — proxy all requests to the Node app
server {
    # Enable HTTP/2
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name app.example.com;

    # Use the Let’s Encrypt certificates
    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;

    # Include the SSL configuration from cipherli.st
    include snippets/ssl-params.conf;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_pass http://localhost:5000/;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }
}


# test nginx

sudo nginx -t
